<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>Blog of Miantang</title>
   <link href="http://miantang.github.io/blog/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://miantang.github.io/blog" rel="alternate" type="text/html" />
   <updated>2014-09-11T23:40:08+08:00</updated>
   <id>http://miantang.github.io/blog</id>
   <author>
     <name>Miantang</name>
     <email>antisaber@gmail.com</email>
   </author>

   
   <entry>
     <title>github起始之旅</title>
     <link href="http://beiyuu.com/mood/gitstart"/>
     <updated>2014-09-11T00:00:00+08:00</updated>
     <id>http://beiyuu.com/mood/gitstart</id>
     <content type="html">&lt;p&gt;人生，其实像一条从宽阔的平原走进森林的路。在平原上同伴可以结伙而行，欢乐地前推后挤、相濡以沫；一旦进入森林，草丛和荆棘挡路，各人专心走各人的路，寻找各人的方向，那推推挤挤的群体情感，那无忧无虑无猜忌的同侪深情，在人的一生中也只有少年期有。离开这段纯洁而明亮的阶段，路其实可能愈走愈孤独。你将被家庭羁绊，被责任捆绑，被自己的野心套牢，被人生的复杂和矛盾压抑，你往丛林深处走去，愈走愈深，不复再有阳光似的伙伴。到了熟透的年龄，即使在群众的怀抱中，你都可能觉得寂寞无比&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>亲爱的安德烈</title>
     <link href="http://beiyuu.com/mood/andelie"/>
     <updated>2014-09-07T00:00:00+08:00</updated>
     <id>http://beiyuu.com/mood/andelie</id>
     <content type="html">&lt;p&gt;人生，其实像一条从宽阔的平原走进森林的路。在平原上同伴可以结伙而行，欢乐地前推后挤、相濡以沫；一旦进入森林，草丛和荆棘挡路，各人专心走各人的路，寻找各人的方向，那推推挤挤的群体情感，那无忧无虑无猜忌的同侪深情，在人的一生中也只有少年期有。离开这段纯洁而明亮的阶段，路其实可能愈走愈孤独。你将被家庭羁绊，被责任捆绑，被自己的野心套牢，被人生的复杂和矛盾压抑，你往丛林深处走去，愈走愈深，不复再有阳光似的伙伴。到了熟透的年龄，即使在群众的怀抱中，你都可能觉得寂寞无比&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Git时代的VIM不完全使用教程</title>
     <link href="http://beiyuu.com/relays/vimtutor"/>
     <updated>2014-07-26T00:00:00+08:00</updated>
     <id>http://beiyuu.com/relays/vimtutor</id>
     <content type="html">&lt;p&gt;最近整理了VIM的配置，换上插件管理的神器-----&lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;，由他引发的VIM生态环境的改善，堪称完美。遂打算写一份简单的教程，分享Git时代VIM新世界的美丽动人之处。&lt;strong&gt;对VIM有基础的同学，可直接跳至插件管理部分。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;VIM的模式&lt;/h2&gt;

&lt;p&gt;第一次使用VIM，会觉得无所适从，他并不像记事本，你敲什么键就显示什么，理解VIM的需要明白他的两种模式：
- 命令模式 (Command Mode)
- 编辑模式 (Insert Mode)&lt;/p&gt;

&lt;p&gt;命令模式下，可以做移动、编辑操作；编辑模式则用来输入。键入&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;o&lt;/code&gt;,&lt;code&gt;s&lt;/code&gt;,&lt;code&gt;a&lt;/code&gt;等即可进入编辑模式，后面解释原因。&lt;/p&gt;

&lt;p&gt;模式的设计是VIM和其他编辑器最不同的地方，优势和劣势也全基于此而生。&lt;/p&gt;

&lt;h2&gt;基本操作&lt;/h2&gt;

&lt;p&gt;以下介绍的键盘操作，都是大小写敏感的，并且要在&lt;strong&gt;命令模式&lt;/strong&gt;下完成，需注意：&lt;/p&gt;

&lt;h3&gt;以字为单位的移动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; 向左移动一个字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; 向下移动一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; 向上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; 向右&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这四个键在右手最容易碰到几个位置，最为常用。&lt;/p&gt;

&lt;h3&gt;以词为单位的移动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; 下一個word w(ord)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt; 下一個word(跳过标点)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 前一個word b(ackward)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; 前一个word(跳过标点)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; 跳到当前word的尾端 e(nd)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;行移动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 跳到当前行的开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; 跳到当前行第一个非空字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 跳到行尾&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;助记：0(第0个字符),&lt;code&gt;^&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;含义同正则表达式&lt;/p&gt;

&lt;h3&gt;段落移动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt; 上一段(以空白行分隔)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt; 下一段(以空白行分隔)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 跳到当前对应的括号上(适用各种配对符号)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;跳跃移动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/xxxx&lt;/code&gt; 搜索xxxx，然后可以用&lt;code&gt;n&lt;/code&gt;下一个，&lt;code&gt;N&lt;/code&gt;上一个移动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; 向前搜索光标当前所在的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 向后搜索光标当前所在的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fx&lt;/code&gt; 在当前行移动到光标之后第一个字符x的位置 f(ind)x&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gd&lt;/code&gt; 跳到光标所在位置词(word)的定义位置 g(o)d(efine)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; 到文档顶部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; 到文档底部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:x&lt;/code&gt; 跳到第x行(x是行号)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+d&lt;/code&gt; 向下翻页 d(down)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+u&lt;/code&gt; 向上翻页 u(p)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;基本编辑&lt;/h3&gt;

&lt;h4&gt;修改&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 在光标当前位置向前插入 i(nsert)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; 在本行第一个字符前插入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 在光标当前位置向后插入 a(fter)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; 在本行末尾插入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; 向下插入一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O&lt;/code&gt; 向上插入一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; 保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; 退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; 保存并退出&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;删除&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 删除当前字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; 删除当前行 d(elete)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dw&lt;/code&gt; 删除当前光标下的词 d(elete)w(ord)&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;复制粘贴&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; 复制当前行 y(ank)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yw&lt;/code&gt; 复制当前光标下的词 y(ank)w(ord)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 粘贴 p(aste)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; 粘贴在当前位置之前&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;进阶操作&lt;/h2&gt;

&lt;p&gt;限于篇幅，在这里我仅介绍下我非常常用的几个操作。&lt;/p&gt;

&lt;h3&gt;重复操作&lt;/h3&gt;

&lt;p&gt;因为VIM所有的操作都是原子化的，所以把这些操作程序化就非常简单了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5w&lt;/code&gt; 相当于按五次&lt;code&gt;w&lt;/code&gt;键；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6j&lt;/code&gt; 下移6行，相当于按六次j；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3J&lt;/code&gt; 大写J,本来是将下一行与当前行合并，加上数量，就是重复操作3次；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6dw&lt;/code&gt;和&lt;code&gt;d6w&lt;/code&gt; 结果是一样，就是删除6个word；&lt;/li&gt;
&lt;li&gt;剩下的无数情况，自己类推吧。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;高效编辑&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di&quot;&lt;/code&gt; 光标在&quot;&quot;之间，则删除&quot;&quot;之间的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yi(&lt;/code&gt; 光标在()之间，则复制()之间的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi[&lt;/code&gt; 光标在[]之间，则选中[]之间的内容&lt;/li&gt;
&lt;li&gt;以上三种可以自由组合搭配，效率奇高，i(nner)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dtx&lt;/code&gt; 删除字符直到遇见光标之后的第一个&lt;code&gt;x&lt;/code&gt;字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ytx&lt;/code&gt; 复制字符直到遇见光标之后的第一个&lt;code&gt;x&lt;/code&gt;字符&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;标记和宏(macro)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ma&lt;/code&gt; 将当前位置标记为a，26个字母均可做标记，&lt;code&gt;mb&lt;/code&gt;、&lt;code&gt;mc&lt;/code&gt;等等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'a&lt;/code&gt; 跳转到a标记的位置；&lt;/li&gt;
&lt;li&gt;这是一组很好的文档内标记方法，在文档中跳跃编辑时很有用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qa&lt;/code&gt; 将之后的所有键盘操作录制下来，直到再次在命令模式按下&lt;code&gt;q&lt;/code&gt;，并存储在&lt;code&gt;a&lt;/code&gt;中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@a&lt;/code&gt; 执行刚刚记录在&lt;code&gt;a&lt;/code&gt;里面的键盘操作；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@&lt;/code&gt; 执行上一次的macro操作；&lt;/li&gt;
&lt;li&gt;宏操作是VIM最为神奇的操作之一，需要慢慢体会其强大之处；&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;VIM的基本操作，可以挖掘的东西非常多，不仅仅需要记忆，更需要自己去探索总结，熟练之后，效率会大幅度提升。后面会给出一些参考链接。&lt;/p&gt;

&lt;h2&gt;插件管理&lt;/h2&gt;

&lt;h3&gt;Vundle&lt;/h3&gt;

&lt;p&gt;终于到这篇Blog我最想讨论的部分了。VIM的强大不仅仅体现在操作的高效率，更有强大而充沛的插件做支援，插件丰富了之后，就面临查找和管理的问题。&lt;/p&gt;

&lt;p&gt;在遇见&lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;之前，我用&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;管理插件。Pathogen还算方便，只需要把相应插件，放在&lt;code&gt;bundle&lt;/code&gt;目录下即可，不需要再像以前那样逐个放置单独的文件到相应目录，大大节省了劳动力，管理起来也一目了然，觉得还不错，至少比vimball那种需要执行命令安装的方式好一些。&lt;/p&gt;

&lt;p&gt;我真希望我早些遇见Vundle。Vundle受到Pathogen和Vimball的启发，于是有了现在的模样。Vundle的逻辑是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在&lt;a href=&quot;http://vim-scripts.org/vim/scripts.html&quot;&gt;Vim Script&lt;/a&gt;选好你想要的插件；&lt;/li&gt;
&lt;li&gt;在VIM的配置文件中写一句 &lt;code&gt;Bundle plugin_name&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;执行一下Vundle的初始化命令，插件就装好了；&lt;/li&gt;
&lt;li&gt;升级和卸载也是同样的简单；&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;完美的世界！&lt;/p&gt;

&lt;h3&gt;Vundle的配置&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;的安装很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后写配置文件&lt;code&gt;.vimrc&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set nocompatible    &quot; be iMproved
filetype off        &quot; required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

&quot; let Vundle manage Vundle
&quot; required!
Bundle 'gmarik/vundle'

&quot; vim-scripts repos
Bundle 'vim-plugin-foo'
Bundle 'vim-plugin-bar'

filetype plugin indent on    &quot; required!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;Bundle&lt;/code&gt;后面的内容，就是插件的名字，插件维护在&lt;a href=&quot;http://vim-scripts.org/vim/scripts.html&quot;&gt;Vim-Script.org&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;然后，打开VIM之后，可以输入以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;安装插件:
:BundleInstall

&quot;更新插件:
:BundleInstall!

&quot;卸载不在列表中的插件:
:BundleClean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在大部分的插件都已经从&lt;a href=&quot;http://www.vim.org/scripts/index.php&quot;&gt;Vim.org&lt;/a&gt;迁移到了&lt;a href=&quot;http://vim-scripts.org/vim/scripts.html&quot;&gt;Vim-Script.org&lt;/a&gt;，而且很多作者也认领了自己的插件，直接在这个Github的项目下更新，一个比Vim.org更科学更有效的生态环境，就这样完美的形成了。&lt;/p&gt;

&lt;p&gt;在此非常严重的感谢vim-scripts.org的创建者&lt;a href=&quot;https://github.com/bronson&quot;&gt;Scott Bronson&lt;/a&gt;，和&lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;的作者&lt;a href=&quot;https://github.com/gmarik&quot;&gt;gmarik&lt;/a&gt;。他们的创新和分享精神，让这个世界又美好了一些。&lt;/p&gt;

&lt;p&gt;也感谢业界良心&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;。Vim-Scripts.org整站就是用&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;建立维护的，对于个人来说，这是很好的选择，有兴趣的同学可以参看我之前的博客：&lt;a href=&quot;http://beiyuu.com/github-pages/&quot;&gt;使用Github Pages建独立博客&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;插件介绍&lt;/h2&gt;

&lt;p&gt;有了Vundle，再装插件就是件享受的事情了。我常用的插件有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#相较于Command-T等查找文件的插件，ctrlp.vim最大的好处在于没有依赖，干净利落
Bundle 'ctrlp.vim'

#在输入()，&quot;&quot;等需要配对的符号时，自动帮你补全剩余半个
Bundle 'AutoClose'

#神级插件，ZenCoding可以让你以一种神奇而无比爽快的感觉写HTML、CSS
Bundle 'ZenCoding.vim'

#在()、&quot;&quot;、甚至HTML标签之间快速跳转；
Bundle 'matchit.zip'

#显示行末的空格；
Bundle 'ShowTrailingWhitespace'

#JS代码格式化插件；
Bundle '_jsbeautify'

#用全新的方式在文档中高效的移动光标，革命性的突破
Bundle 'EasyMotion'

#自动识别文件编码；
Bundle 'FencView.vim'

#必不可少，在VIM的编辑窗口树状显示文件目录
Bundle 'The-NERD-tree'

#NERD出品的快速给代码加注释插件，选中，`ctrl+h`即可注释多种语言代码；
Bundle 'The-NERD-Commenter'

#解放生产力的神器，简单配置，就可以按照自己的风格快速输入大段代码。
Bundle 'UltiSnips'

#让代码更加易于纵向排版，以=或,符号对齐
Bundle 'Tabular'

#迄今位置最好的自动VIM自动补全插件了吧
#Vundle的这个写法，是直接取该插件在Github上的repo
Bundle 'Valloric/YouCompleteMe'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上插件可以在&lt;a href=&quot;http://vim-scripts.org/vim/scripts.html&quot;&gt;vim-script.org&lt;/a&gt;找到源码和文档，&lt;a href=&quot;http://mattn.github.com/zencoding-vim/&quot;&gt;ZenCoding&lt;/a&gt;和&lt;a href=&quot;http://net.tutsplus.com/tutorials/other/vim-essential-plugin-easymotion/&quot;&gt;EasyMotion&lt;/a&gt;演示点链接,你会心动的。&lt;/p&gt;

&lt;h2&gt;.vimrc配置&lt;/h2&gt;

&lt;p&gt;因为配置不断在更新，所以放上我的配置的链接：&lt;a href=&quot;https://github.com/beiyuu/vimfiles/blob/master/_vimrc&quot;&gt;.vimrc配置&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;更多&lt;/h2&gt;

&lt;p&gt;VIM在一开始会觉得非常不习惯，一定要坚持下去，收获的会更多，不仅仅是在装大侠方面的哦~&lt;/p&gt;

&lt;p&gt;关于VIM的使用，这篇博客仅仅介绍了很小的一部分，网络上还有大量朋友总结的心得，常学常有收获：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10599776/&quot;&gt;Practical Vim&lt;/a&gt;，强烈推荐的一本系统介绍VIM的书籍&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://overapi.com/vim/&quot;&gt;Vim Cheat Sheet&lt;/a&gt;，有VIM的各种助记图，可以作为桌面&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vimer.cn/&quot;&gt;Vimer的程序世界&lt;/a&gt;，不错的站，博主持续钻研VIM各种技巧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hi.baidu.com/whqvzhjoixbbdwd/item/11315a5073667d0de6c4a5e9&quot;&gt;网友狂人收集的vim资料链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rayninfo.co.uk/vimtips.html&quot;&gt;Best of Vim Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.limboy.com/2009/05/30/vim-setting/&quot;&gt;面向前端开发者和TextMate粉丝的vim配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scmbob.org/vim_fdm.html&quot;&gt;Vim代码折叠简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.longwin.com.tw/2009/03/choose-vim-color-scheme-2009/&quot;&gt;挑選 Vim 顏色(Color Scheme)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot;&gt;vimium&lt;/a&gt;，用VIM的操作习惯来控制Chrome的插件&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>解决goagent下youtube飞墙视频无法播放的记录</title>
     <link href="http://beiyuu.com/notes/youtubejump"/>
     <updated>2014-04-15T00:00:00+08:00</updated>
     <id>http://beiyuu.com/notes/youtubejump</id>
     <content type="html">&lt;p&gt;在&lt;a href=&quot;http://mooc.guokr.com/&quot;&gt;果壳MOOC学院&lt;/a&gt;fork了一些课程。觉得自己应该利用业余时间拓展一些知识。特别是英文授课的内容。&lt;/p&gt;

&lt;p&gt;现今主要关注了CS方面、未来技能方面和English Writing方面的课程。国外各大名校的教授水平应该不低。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;https://www.udacity.com/&quot;&gt;udacity&lt;/a&gt;和&lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;都需要使用youtube进行视频播放。  &lt;br/&gt;
遇到一个问题： &lt;br/&gt;
youtube网页能正常打开，但视频却是undefined无法播放。
上goagent的谷歌code处查找到了相关的解决办法： &lt;br/&gt;
SwitchySharp Options添加一条rule:&lt;em&gt;://&lt;/em&gt;.googlevideo.com/*。。
Mission complete!&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>一个Javascript程序员的源代码游戏</title>
     <link href="http://beiyuu.com/relays/untrust"/>
     <updated>2014-04-13T00:00:00+08:00</updated>
     <id>http://beiyuu.com/relays/untrust</id>
     <content type="html">&lt;p&gt;This is a A meta-JavaScript adventure game.&lt;/p&gt;

&lt;p&gt;很有趣。只能在特定的行使用javascript修改源代码，使用自己的方法，把障碍物#或者隐形的Object(mine)移除。 &lt;br/&gt;
使得绿色@(Player)能到达♢(exit)出口。 &lt;br/&gt;
有相关的内部API使用。&lt;/p&gt;

&lt;p&gt;虽然我暂时只玩到了第五关。。&lt;/p&gt;

&lt;p&gt;以下是传送地址
&lt;a href=&quot;http://alexnisnevich.github.io/untrusted/&quot;&gt;http://alexnisnevich.github.io/untrusted/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jayisgames.com/images/untrusted/untrusted.html&quot; title=&quot;http://jayisgames.com/images/untrusted/untrusted.html&quot;&gt;http://jayisgames.com/images/untrusted/untrusted.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; 包括Github下的源代码  &lt;br/&gt;
&lt;a href=&quot;https://github.com/AlexNisnevich/untrusted&quot; title=&quot;https://github.com/AlexNisnevich/untrusted&quot;&gt;https://github.com/AlexNisnevich/untrusted&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe frameborder=&quot;0&quot; height=&quot;700&quot; marginheight=&quot;0px&quot; marginwidth=&quot;0px&quot; scrolling=&quot;no&quot; src=&quot;http://jayisgames.com/images/untrusted/untrusted.html&quot; width=&quot;1230&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>理想的写作环境：Git+Github+Markdown+Jekyll</title>
     <link href="http://beiyuu.com/relays/writing"/>
     <updated>2014-04-10T00:00:00+08:00</updated>
     <id>http://beiyuu.com/relays/writing</id>
     <content type="html">&lt;p&gt;理想的写作环境，受各类干扰小、清理废话及版本管理容易。曾花费较长时间寻找，最后还是到了。&lt;/p&gt;

&lt;p&gt;2010年开始，采取Git+Github+Markdown+Jekyll，完成一些作品。暖色调灯光，黑暗的背景色，全屏的写作状态，很有氛围。&lt;/p&gt;

&lt;p&gt;这种搭配，符合心理学原理，背后有着相应理念。分享如下：&lt;/p&gt;

&lt;p&gt;Git
让人不再担心写废，想到哪里，写到哪里。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://zh-cn.whygitisbetterthanx.com/&quot;&gt;http://zh-cn.whygitisbetterthanx.com/&lt;/a&gt; &lt;br/&gt;
Github
让人不再担心备份与远程协作，一切提交，均有记录。&lt;/p&gt;

&lt;h3&gt;补充介绍&lt;/h3&gt;

&lt;p&gt;购买一个Github的私人账户，用于托管个人&quot;不适合公开&quot;的项目。 零散的思考，随时写在Jekyll的_drafts目录下。当思考成熟，予以发布。较系统的思考，尤其需要远程协作，则参考Github中成功的开源图书项目，单独整理为Jekyll的子目录或独立项目。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html&quot;&gt;How I Turned Down $300,000 from Microsoft to go Full-Time on GitHub
Markdown &lt;/a&gt;  &lt;br/&gt;
不再忧虑排版，专注写作。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://markdown.tw/&quot;&gt;Markdown语法中译&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://jianshu.io/p/q81RER&quot;&gt;献给写作者的 Markdown 新手指南&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Octopress出来之后，也向人推荐。但自己不用。之所以用Jekyll，是希望专注于写作而非版式、图片等。如果用Octopress，又回归老路了。 Octopress有两点细节不能接受：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无法支持Github在线编辑；&lt;/li&gt;
&lt;li&gt;分源码与生成两个分支，违背简洁原则。

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Blogging Like a Hacker&lt;/a&gt;

&lt;h3&gt;相关参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/flow.html&quot;&gt;如何提高创作型任务的效率？&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/psy/mac.html&quot;&gt;如何提高创作型任务的效率？（MAC版）&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/tech/github.html&quot;&gt;如何高效利用Github&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/tech/r-markdown-knitr.html&quot;&gt;Markdown写作浅谈&lt;/a&gt;
&lt;a href=&quot;http://www.yangzhiping.com/psy/writers-model.html&quot;&gt;快速写作模式谈&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;声明: 本文采用 BY-NC-SA授权。 *&lt;br/&gt;
&lt;/em&gt;转载自http://www.yangzhiping.com/tech/writing-space.html*&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Github的学习教程</title>
     <link href="http://beiyuu.com/relays/whriting"/>
     <updated>2014-04-10T00:00:00+08:00</updated>
     <id>http://beiyuu.com/relays/whriting</id>
     <content type="html">&lt;p&gt;理想的写作环境，受各类干扰小、清理废话及版本管理容易。曾花费较长时间寻找，最后还是到了。&lt;/p&gt;

&lt;p&gt;2010年开始，采取Git+Github+Markdown+Jekyll，完成一些作品。暖色调灯光，黑暗的背景色，全屏的写作状态，很有氛围。&lt;/p&gt;

&lt;p&gt;这种搭配，符合心理学原理，背后有着相应理念。分享如下：&lt;/p&gt;

&lt;p&gt;Git
让人不再担心写废，想到哪里，写到哪里。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;http://zh-cn.whygitisbetterthanx.com/ &lt;br/&gt;
Github
让人不再担心备份与远程协作，一切提交，均有记录。&lt;/p&gt;

&lt;h3&gt;补充介绍&lt;/h3&gt;

&lt;p&gt;购买一个Github的私人账户，用于托管个人&quot;不适合公开&quot;的项目。 零散的思考，随时写在Jekyll的_drafts目录下。当思考成熟，予以发布。较系统的思考，尤其需要远程协作，则参考Github中成功的开源图书项目，单独整理为Jekyll的子目录或独立项目。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html&quot;&gt;How I Turned Down $300,000 from Microsoft to go Full-Time on GitHub
Markdown &lt;/a&gt;  &lt;br/&gt;
不再忧虑排版，专注写作。&lt;/p&gt;

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://markdown.tw/&quot;&gt;Markdown语法中译&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://jianshu.io/p/q81RER&quot;&gt;献给写作者的 Markdown 新手指南&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Octopress出来之后，也向人推荐。但自己不用。之所以用Jekyll，是希望专注于写作而非版式、图片等。如果用Octopress，又回归老路了。 Octopress有两点细节不能接受：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无法支持Github在线编辑；&lt;/li&gt;
&lt;li&gt;分源码与生成两个分支，违背简洁原则。

&lt;h3&gt;背后理念&lt;/h3&gt;

&lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Blogging Like a Hacker&lt;/a&gt;

&lt;h3&gt;相关参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/flow.html&quot;&gt;如何提高创作型任务的效率？&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/psy/mac.html&quot;&gt;如何提高创作型任务的效率？（MAC版）&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/tech/github.html&quot;&gt;如何高效利用Github&lt;/a&gt; &lt;br/&gt;
&lt;a href=&quot;http://www.yangzhiping.com/tech/r-markdown-knitr.html&quot;&gt;Markdown写作浅谈&lt;/a&gt;
&lt;a href=&quot;http://www.yangzhiping.com/psy/writers-model.html&quot;&gt;快速写作模式谈&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;声明: 本文采用 BY-NC-SA授权。微信号Mindnote，欢迎订阅。扫码请点击&lt;/em&gt;
&lt;em&gt;转载自http://www.yangzhiping.com/tech/writing-space.html&lt;/em&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Jekyll学习笔记</title>
     <link href="http://beiyuu.com/notes/jekyll-learing"/>
     <updated>2014-04-10T00:00:00+08:00</updated>
     <id>http://beiyuu.com/notes/jekyll-learing</id>
     <content type="html">&lt;p&gt;这里收集了一些关于jekyll语法或者建设博客的教程：&lt;/p&gt;

&lt;h5&gt;1.Jekyll变量 和 Jekyll模板语法教程&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://higrid.net/c-art-jeklly_template_data.htm&quot; title=&quot;http://higrid.net/c-art-jeklly_template_data.htm&quot;&gt;http://higrid.net/c-art-jeklly_template_data.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文主要讲述Jekyll变量 和 Jekyll模板语法教程相关内容：Jekyll变量和Jekyll模板语法，包括全局变量、Site变量、Page变量和需要注意的内容，其中变量解释内容翻译自官方wiki。&lt;/p&gt;

&lt;h5&gt;2.JekyllBootstrap官方网站&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/&quot; title=&quot;http://jekyllbootstrap.com/&quot;&gt;http://jekyllbootstrap.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要用于简化建设博客流程。（苦逼的我居然还各种找模板，改模板，有时间自己写写模板看。。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/blog-configuration.html&quot; title=&quot;http://jekyllbootstrap.com/usage/blog-configuration.html&quot;&gt;http://jekyllbootstrap.com/usage/blog-configuration.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllcn.com/docs/home/&quot; title=&quot;http://jekyllcn.com/docs/home/&quot;&gt;http://jekyllcn.com/docs/home/&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Github+Jekyll博客环境的搭建遇到的问题</title>
     <link href="http://beiyuu.com/notes/gent"/>
     <updated>2014-04-10T00:00:00+08:00</updated>
     <id>http://beiyuu.com/notes/gent</id>
     <content type="html">&lt;h1&gt;github+jekyll博客环境的搭建遇到的问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.git简易指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.bootcss.com/p/git-guide/&quot; title=&quot;http://www.bootcss.com/p/git-guide/&quot;&gt;http://www.bootcss.com/p/git-guide/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.git简单实用教程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wuyuans.com/2012/05/github-simple-tutorial/&quot; title=&quot;http://wuyuans.com/2012/05/github-simple-tutorial/&quot;&gt;http://wuyuans.com/2012/05/github-simple-tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.使用github+jekyll搭建blog环境，完美替代wordpress&lt;/strong&gt;
&lt;a href=&quot;http://www.heiniuhaha.com/lessons/2012/08/09/use-jekyll-build-blog/&quot; title=&quot;http://www.heiniuhaha.com/lessons/2012/08/09/use-jekyll-build-blog/&quot;&gt;http://www.heiniuhaha.com/lessons/2012/08/09/use-jekyll-build-blog/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   在进行jekyll serve(按提示--server指令已经过时，需要使用serve)这一步时，
遇到的情况是，libyaml版本低于0.1.5，需要升级成0.1.6。可以参考 &lt;br/&gt;
&lt;a href=&quot;https://www.ruby-lang.org/en/news/2014/03/29/heap-overflow-in-yaml-uri-escape-parsing-cve-2014-2525/&quot; title=&quot;https://www.ruby-lang.org/en/news/2014/03/29/heap-overflow-in-yaml-uri-escape-parsing-cve-2014-2525/&quot;&gt;https://www.ruby-lang.org/en/news/2014/03/29/heap-overflow-in-yaml-uri-escape-parsing-cve-2014-2525/&lt;/a&gt; &lt;br/&gt;
我安装的是ruby193版本。（考虑到稳定性等因素，没有搭建2.1.1版本及以上，这也是官网推荐的稳定版本）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  SafeYAML Warning   

You appear to have an outdated version of libyaml (0.1.5) installed on your system.   
Prior to 0.1.6, libyaml is vulnerable to a heap overflow exploit from malicious YAML payloads.
For more info, see:  
  *https://www.ruby-lang.org/en/news/2014/03/29/heap-overflow-in-yaml-uri-escape-parsing-cve-2014-2525/*   

  The easiest thing to do right now is probably to update Psych to the  latest version and enable the 'bundled-libyaml' option, which will  install a vendored libyaml with the vulnerability patched:   

  **gem install psych -- --enable-bundled-libyaml**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里提到gem install psych -- --enable-bundled-libyaml这一步，提交指令之后依然是此问题不能解决。
然后参考了 &lt;br/&gt;
&lt;a href=&quot;http://jonforums.github.io/ruby/2012/02/24/hacking-a-gem.html&quot; title=&quot;http://jonforums.github.io/ruby/2012/02/24/hacking-a-gem.html &quot;&gt;http://jonforums.github.io/ruby/2012/02/24/hacking-a-gem.html &lt;/a&gt;&lt;br/&gt;
均无解。。。 &lt;br/&gt;
最后发现这是warning。。暂时放弃解决。
同时发现了另外一个bug，关于中文GBK文字无法显示的bug。 &lt;br/&gt;
终于在这找到了答案：
&lt;a href=&quot;http://changfengmingzhi.blog.163.com/blog/static/16710528820131013103511364/&quot; title=&quot;http://changfengmingzhi.blog.163.com/blog/static/16710528820131013103511364/&quot;&gt;http://changfengmingzhi.blog.163.com/blog/static/16710528820131013103511364/&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;Jekyll 本地调试之若干问题&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html&quot; title=&quot;http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html&quot;&gt;http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;http://beiyuu.com/&lt;/h6&gt;

&lt;h4&gt;http://blog.fens.me/jekyll-bootstarp-github/&lt;/h4&gt;
</content>
   </entry>
   
   <entry>
     <title>Github的学习教程</title>
     <link href="http://beiyuu.com/notes/git-learning"/>
     <updated>2014-04-09T00:00:00+08:00</updated>
     <id>http://beiyuu.com/notes/git-learning</id>
     <content type="html">&lt;h3&gt;1.Github Pages极简教程&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/tech/writing-space.html&quot; title=&quot;http://www.yangzhiping.com/tech/writing-space.html&quot;&gt;http://www.yangzhiping.com/tech/writing-space.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;2.10篇写给Git初学者的最佳教程&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kuqin.com/managetool/20110705/92113.html&quot; title=&quot;http://www.kuqin.com/managetool/20110705/92113.html&quot;&gt;http://www.kuqin.com/managetool/20110705/92113.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大部分都是英文。有时间去阅读一下。&lt;/p&gt;
</content>
   </entry>
   
 
</feed>
